"use strict";

var _amen = require("@dashkite/amen");

var _amenConsole = _interopRequireDefault(require("@dashkite/amen-console"));

var _assert = _interopRequireDefault(require("@dashkite/assert"));

var _configuration = _interopRequireDefault(require("./configuration.js"));

var _base = require("../src/base.js");

var _index = require("../src/index.js");

var _html = _interopRequireDefault(require("./helpers/html.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test;

test = function (name, f) {
  return (0, _amen.test)({
    description: name,
    wait: 30000
  }, f);
};

(async function ({
  base,
  record
}) {
  (0, _amenConsole.default)(await (0, _amen.test)("Airtable Helpers", [await (0, _amen.test)("Base", [await test("create", async function () {
    base = await _base.Base.create(_configuration.default.airtable);
    return await base.create({
      table: "Test",
      records: [{
        "Name": "Test",
        "Notes": "This is a test."
      }]
    });
  }), await (0, _amen.test)("find", [test("single", async function () {
    record = await base.find({
      table: "Pagination Test",
      id: "recqH6NNMug5nFtC2"
    });
    return (0, _assert.default)(record != null);
  }), test("multiple", async function () {
    record = await base.findAll({
      table: "Pagination Test",
      ids: ["recqH6NNMug5nFtC2", "rec1HIU8rDLhLgW9g"]
    });
    console.log({
      record
    });
    return _assert.default.equal(2, record.length);
  }), test("single not found", async function () {
    record = await base.find({
      table: "Pagination Test",
      id: "foobar"
    });
    return (0, _assert.default)(record == null);
  }), test("multiple not found", async function () {
    record = await base.findAll({
      table: "Pagination Test",
      ids: ["foo", "bar"]
    });
    return _assert.default.equal(0, record.length);
  })]), await test("selectOne", async function () {
    record = await base.selectOne({
      table: "Test",
      query: "{Name} = 'Test'"
    });
    return _assert.default.equal("Test", record.get("Name"));
  }), await test("selectAll", async function () {
    var records;
    records = await base.selectAll({
      table: "Pagination Test"
    });
    return _assert.default.equal(110, records.length);
  }), await test("update", async function () {
    var notes;
    notes = record.get("Notes");

    if (notes === "This is a test.") {
      notes = "This is not a test.";
    } else {
      notes = "This is a test.";
    }

    record = await base.update({
      table: "Test",
      id: record.id,
      fields: {
        Notes: notes
      }
    });
    return _assert.default.equal(notes, record.get("Notes"));
  }), await test("replace", async function () {
    var notes;
    notes = record.get("Notes");

    if (notes === "This is a test.") {
      notes = "This is not a test.";
    } else {
      notes = "This is a test.";
    }

    record = await base.replace({
      table: "Test",
      id: record.id,
      fields: {
        Notes: notes
      }
    });
    return _assert.default.equal(notes, record.get("Notes"));
  }), await test("delete", async function () {
    return await base.delete({
      table: "Test",
      id: record.id
    });
  })])]));
  return process.exit(_amen.success);
})({});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=test/index.coffee