"use strict";

var _amen = require("@dashkite/amen");

var _amenConsole = _interopRequireDefault(require("@dashkite/amen-console"));

var _assert = _interopRequireDefault(require("@dashkite/assert"));

var _configuration = _interopRequireDefault(require("./configuration.js"));

var _base = require("../src/base.js");

var _index = require("../src/index.js");

var _html = _interopRequireDefault(require("./helpers/html.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test;

test = function (name, f) {
  return (0, _amen.test)({
    description: name,
    wait: 30000
  }, f);
};

(async function ({
  base,
  record
}) {
  (0, _amenConsole.default)(await test("Airtable Helpers", [await test("Base", [await test("create", async function () {
    base = await _base.Base.create(_configuration.default.airtable);
    return await base.create({
      table: "Test",
      records: [{
        "Name": "Test",
        "Notes": "This is a test."
      }]
    });
  }), await test("selectOne", async function () {
    record = await base.selectOne({
      table: "Test",
      query: "{Name} = 'Test'"
    });
    return _assert.default.equal("Test", record.get("Name"));
  }), await test("selectAll", async function () {
    var records;
    records = await base.selectAll({
      table: "Pagination Test",
      pageSize: 2
    });
    return _assert.default.equal(10, records.length);
  }), await test("update", async function () {
    var notes;
    notes = record.get("Notes");

    if (notes === "This is a test.") {
      notes = "This is not a test.";
    } else {
      notes = "This is a test.";
    }

    record = await base.update({
      table: "Test",
      id: record.id,
      fields: {
        Notes: notes
      }
    });
    return _assert.default.equal(notes, record.get("Notes"));
  }), await test("delete", async function () {
    return await base.delete({
      table: "Test",
      id: record.id
    });
  })])]));
  return process.exit(_amen.success);
})({});
//# sourceMappingURL=data:application/json;base64,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YXMgX3Rlc3QsIHN1Y2Nlc3MgfSBmcm9tIFwiQGRhc2hraXRlL2FtZW5cIlxuaW1wb3J0IHByaW50IGZyb20gXCJAZGFzaGtpdGUvYW1lbi1jb25zb2xlXCJcbmltcG9ydCBhc3NlcnQgZnJvbSBcIkBkYXNoa2l0ZS9hc3NlcnRcIlxuXG5pbXBvcnQgY29uZmlndXJhdGlvbiBmcm9tIFwiLi9jb25maWd1cmF0aW9uXCJcblxuaW1wb3J0IHsgQmFzZSB9IGZyb20gXCIuLi9zcmMvYmFzZVwiXG5pbXBvcnQgeyBTaXRlLCBQYWdlLCBDb250ZW50IH0gZnJvbSBcIi4uL3NyY1wiXG5cbmltcG9ydCBodG1sIGZyb20gXCIuL2hlbHBlcnMvaHRtbFwiXG5cbnRlc3QgPSAobmFtZSwgZikgLT5cbiAgX3Rlc3RcbiAgICBkZXNjcmlwdGlvbjogbmFtZVxuICAgIHdhaXQ6IDMwMDAwXG4gICAgZlxuXG5kbyAoeyBiYXNlLCByZWNvcmQgfSA9IHt9KSAtPlxuXG4gIHByaW50IGF3YWl0IHRlc3QgXCJBaXJ0YWJsZSBIZWxwZXJzXCIsIFtcblxuICAgIGF3YWl0IHRlc3QgXCJCYXNlXCIsIFtcblxuICAgICAgYXdhaXQgdGVzdCBcImNyZWF0ZVwiLCAtPlxuICAgICAgICBiYXNlID0gYXdhaXQgQmFzZS5jcmVhdGUgY29uZmlndXJhdGlvbi5haXJ0YWJsZVxuICAgICAgICBhd2FpdCBiYXNlLmNyZWF0ZVxuICAgICAgICAgIHRhYmxlOiBcIlRlc3RcIlxuICAgICAgICAgIHJlY29yZHM6IFtcbiAgICAgICAgICAgIFwiTmFtZVwiOiBcIlRlc3RcIlxuICAgICAgICAgICAgXCJOb3Rlc1wiOiBcIlRoaXMgaXMgYSB0ZXN0LlwiXG4gICAgICAgICAgXVxuXG4gICAgICBhd2FpdCB0ZXN0IFwic2VsZWN0T25lXCIsIC0+XG4gICAgICAgIHJlY29yZCA9IGF3YWl0IGJhc2Uuc2VsZWN0T25lXG4gICAgICAgICAgdGFibGU6IFwiVGVzdFwiXG4gICAgICAgICAgcXVlcnk6IFwie05hbWV9ID0gJ1Rlc3QnXCJcbiAgICAgICAgYXNzZXJ0LmVxdWFsIFwiVGVzdFwiLCByZWNvcmQuZ2V0IFwiTmFtZVwiXG5cbiAgICAgIGF3YWl0IHRlc3QgXCJzZWxlY3RBbGxcIiwgLT5cbiAgICAgICAgcmVjb3JkcyA9IGF3YWl0IGJhc2Uuc2VsZWN0QWxsXG4gICAgICAgICAgdGFibGU6IFwiUGFnaW5hdGlvbiBUZXN0XCJcbiAgICAgICAgICBwYWdlU2l6ZTogMlxuICAgICAgICBhc3NlcnQuZXF1YWwgMTAsIHJlY29yZHMubGVuZ3RoXG5cbiAgICAgIGF3YWl0IHRlc3QgXCJ1cGRhdGVcIiwgLT5cblxuICAgICAgICBub3RlcyA9IHJlY29yZC5nZXQgXCJOb3Rlc1wiXG5cbiAgICAgICAgaWYgbm90ZXMgPT0gXCJUaGlzIGlzIGEgdGVzdC5cIlxuICAgICAgICAgIG5vdGVzID0gXCJUaGlzIGlzIG5vdCBhIHRlc3QuXCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIG5vdGVzID0gXCJUaGlzIGlzIGEgdGVzdC5cIlxuXG4gICAgICAgIHJlY29yZCA9IGF3YWl0IGJhc2UudXBkYXRlXG4gICAgICAgICAgdGFibGU6IFwiVGVzdFwiXG4gICAgICAgICAgaWQ6IHJlY29yZC5pZFxuICAgICAgICAgIGZpZWxkczpcbiAgICAgICAgICAgIE5vdGVzOiBub3Rlc1xuICAgICAgICBcbiAgICAgICAgYXNzZXJ0LmVxdWFsIG5vdGVzLCByZWNvcmQuZ2V0IFwiTm90ZXNcIlxuXG4gICAgICBhd2FpdCB0ZXN0IFwiZGVsZXRlXCIsIC0+XG4gICAgICAgIGF3YWl0IGJhc2UuZGVsZXRlXG4gICAgICAgICAgdGFibGU6IFwiVGVzdFwiXG4gICAgICAgICAgaWQ6IHJlY29yZC5pZFxuXG4gICAgXVxuXG5cbiAgXVxuXG4gIFxuICBwcm9jZXNzLmV4aXQgc3VjY2Vzc1xuXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=test/index.coffee